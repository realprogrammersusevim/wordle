#!/usr/bin/env python3

import argparse
import random
from enum import Enum

parser = argparse.ArgumentParser(description="Wordle solver")
parser.add_argument("-r", "--random", action="store_true", help="Use a random word")
parser.add_argument(
    "-o", "--outside", action="store_true", help="Use an outside guesser"
)
parser.add_argument("-n", "--number", help="Maximum number of suggestions to show")
parser.add_argument(
    "-s",
    "--suggestions",
    action="store_true",
    help="Hide the remaining word suggestions",
)
args = parser.parse_args()

with open("data/words_alpha.txt") as f:
    words = f.read().splitlines()

# Filter words with 5 characters
words = [word for word in words if len(word) == 5]
random.shuffle(words)


def not_in_word(letter, words):
    # Remove words that contain the letter
    return [word for word in words if letter not in word]


def in_word(letter, words):
    # Remove words that don't contain the letter
    return [word for word in words if letter in word]


def in_word_at_position(letter, position, words):
    # Remove words that don't have the letter at the position
    return [word for word in words if word[position] == letter]


def in_word_not_at_position(letter, position, words):
    # Remove words that have the letter at the position
    words = in_word(letter, words)
    return [word for word in words if word[position] != letter]


def get_input(secret: bool):
    while True:
        if secret:
            guess = input("Enter a secret word: ")
            print("\033[A                             \033[A")
        else:
            guess = input("Enter a guess: ")

        guess = guess.lower()

        # Allow words that aren't the answer if we're not showing suggestions
        if not args.suggestions:
            if guess not in words:
                print("Word is not in the dictionary")
                continue

        if len(guess) != 5:
            print("Word must be 5 letters long stupid")
            continue
        elif guess in guesses:
            print("You already guessed that word")
            continue
        elif not guess.isalpha():
            print("Word must be alphabetic")
            continue
        else:
            break

    return guess


class LetterState(Enum):
    NOT_IN_WORD = 1
    IN_WORD_AT_POSITION = 2
    IN_WORD_NOT_AT_POSITION = 3


class Letter:
    def __init__(self, letter):
        self.letter = letter
        self.state = LetterState.NOT_IN_WORD

    def __str__(self):
        return f"{self.letter}, {self.state}"

    def __repr__(self):
        return f"{self.letter, self.state}"


guesses = []

# Let the user put in a secret word
if args.random or args.outside:
    secret_word = random.choice(words)
else:
    secret_word = get_input(True)


def display_guess(guess):
    for letter in guess:
        if letter.state == LetterState.NOT_IN_WORD:
            print(f"\033[31m{letter.letter}\033[0m", end="")
        elif letter.state == LetterState.IN_WORD_AT_POSITION:
            print(f"\033[32m{letter.letter}\033[0m", end="")
        else:
            print(f"\033[33m{letter.letter}\033[0m", end="")
    print()


won = False

for i in range(0, 6):
    print(f"Guess {i + 1}")
    guess_word = get_input(False)
    guess = []

    if args.outside:
        guess_output = input("Enter guess result: ")
        # 1 = not in word, 2 = in word at position, 3 = in word not at position
        for li, letter in enumerate(guess_output):
            curr_letter = Letter(guess_word[li])
            if letter == "1":
                curr_letter.state = LetterState.NOT_IN_WORD
            elif letter == "2":
                curr_letter.state = LetterState.IN_WORD_AT_POSITION
            else:
                curr_letter.state = LetterState.IN_WORD_NOT_AT_POSITION
            guess.append(curr_letter)
    else:
        if guess_word == secret_word:
            print("You win!")
            won = True
            break

        for li, letter in enumerate(guess_word):
            curr_letter = Letter(letter)
            if secret_word[li] == letter:
                curr_letter.state = LetterState.IN_WORD_AT_POSITION
            elif letter in secret_word:
                curr_letter.state = LetterState.IN_WORD_NOT_AT_POSITION
            else:
                curr_letter.state = LetterState.NOT_IN_WORD

            guess.append(curr_letter)

    # Remove words that don't have the guessed letter at the guessed position
    for li, letter in enumerate(guess):
        if letter.state == LetterState.IN_WORD_AT_POSITION:
            words = in_word_at_position(letter.letter, li, words)
        elif letter.state == LetterState.IN_WORD_NOT_AT_POSITION:
            words = in_word_not_at_position(letter.letter, li, words)
        else:
            words = not_in_word(letter.letter, words)

    # Special states

    guesses.append(guess)
    print("Guesses:")
    for guess in guesses:
        display_guess(guess)
    print("Words left:", len(words))
    if not args.suggestions:
        if len(words) > 50:
            print("Words:", words[:20])
        else:
            print("Words:", words)

        random.shuffle(words)

if not won and not args.outside:
    print("You lose!")
    print("The secret word was:", secret_word)
